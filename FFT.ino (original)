
int rawData[64] = {};

byte sine_data[91] = {
  0,
  4, 9, 13, 18, 22, 27, 31, 35, 40, 44,
  49, 53, 57, 62, 66, 70, 75, 79, 83, 87,
  91, 96, 100, 104, 108, 112, 116, 120, 124, 127,
  131, 135, 139, 143, 146, 150, 153, 157, 160, 164,
  167, 171, 174, 177, 180, 183, 186, 189, 192, 195,  //Paste this at top of program
  198, 201, 204, 206, 209, 211, 214, 216, 219, 221,
  223, 225, 227, 229, 231, 233, 235, 236, 238, 240,
  241, 243, 244, 245, 246, 247, 248, 249, 250, 251,
  252, 253, 253, 254, 254, 254, 255, 255, 255, 255
};
//float f_peaks[5];  // top 5 frequencies peaks in descending order

const byte over[] = { 14, 15, 10, 2, 9, 4, 5, 12 };
const byte down[] = { 3, 7, 16, 6, 11, 17, 13, 8 };

unsigned int startTime;
unsigned int endTime;

int amplitudes[8];

uint8_t on = HIGH;
uint8_t off = LOW;

bool showArea = false;
bool buttonPressed = false;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(2000000);
  for (int i = 0; i < 8; i++) {
    pinMode(over[i], OUTPUT);
    pinMode(down[i], OUTPUT);
  }
  pinMode(A0, INPUT);
}

void loop() {  //runs about 60 times per second

  if(digitalRead(21) == 0){
    if(buttonPressed == false){
      showArea = !showArea;
    }
    buttonPressed = true;    
  }
  else{
    buttonPressed = false;
  }

  for (int i = 0; i < 8; i++) {
    digitalWrite(over[i], HIGH);
    digitalWrite(down[i], LOW);
    // Serial.print("Column: ");
    // Serial.print(i);
    // Serial.print(" Amplitude: ");
    // Serial.println(amplitudes[i]);
    amplitudes[i] = 0;
  }

  FFT(rawData, 64, 64 * (1000 / (endTime - startTime)));

  amplitudes[3] *= 0.5;
  amplitudes[4] *= 0.5;
  amplitudes[5] *= 0.2;
  amplitudes[6] *= 0.142857;
  amplitudes[7] *= 0.083333;

  for (int i = 0; i < 8; i++) {
    if (amplitudes[i] >= 1180) {
      digitalWrite(over[i], off);
    } else {
      digitalWrite(over[i], on);
    }
  }
  digitalWrite(down[0], HIGH);

  //Collect data:
  startTime = millis();
  for (int i = 0; i < 64; i++) {
    rawData[i] = analogRead(A0);
    if (i == 4 || i == 36) {
      digitalWrite(down[0], LOW);
      for (int i = 0; i < 8; i++) {
        if (amplitudes[i] >= 1070 && (amplitudes[i] < 1180 || showArea)) {
          digitalWrite(over[i], off);
        } else {
          digitalWrite(over[i], on);
        }
      }
      digitalWrite(down[1], HIGH);

    } else if (i == 8 || i == 40) {
      digitalWrite(down[1], LOW);
      for (int i = 0; i < 8; i++) {
        if (amplitudes[i] >= 960 && (amplitudes[i] < 1070 || showArea)) {
          digitalWrite(over[i], off);
        } else {
          digitalWrite(over[i], on);
        }
      }
      digitalWrite(down[2], HIGH);
    } else if (i == 12 || i == 44) {
      digitalWrite(down[2], LOW);
      for (int i = 0; i < 8; i++) {
        if (amplitudes[i] >= 740 && (amplitudes[i] < 850 || showArea)) {
          digitalWrite(over[i], off);
        } else {
          digitalWrite(over[i], on);
        }
      }
      digitalWrite(down[3], HIGH);
    } else if (i == 16 || i == 48) {
      digitalWrite(down[3], LOW);
      for (int i = 0; i < 8; i++) {
        if (amplitudes[i] >= 630 && (amplitudes[i] < 740 || showArea)) {
          digitalWrite(over[i], off);
        } else {
          digitalWrite(over[i], on);
        }
      }
      digitalWrite(down[4], HIGH);
    } else if (i == 20 || i == 52) {
      digitalWrite(down[4], LOW);
      for (int i = 0; i < 8; i++) {
        if (amplitudes[i] >= 520 && (amplitudes[i] < 630 || showArea)) {
          digitalWrite(over[i], off);
        } else {
          digitalWrite(over[i], on);
        }
      }
      digitalWrite(down[5], HIGH);
    } else if (i == 24 || i == 56) {
      digitalWrite(down[5], LOW);
      for (int i = 0; i < 8; i++) {
        if (amplitudes[i] >= 410 && (amplitudes[i] < 520 || showArea)) {
          digitalWrite(over[i], off);
        } else {
          digitalWrite(over[i], on);
        }
      }
      digitalWrite(down[6], HIGH);
    } else if (i == 28 || i == 60) {
      digitalWrite(down[6], LOW);
      for (int i = 0; i < 8; i++) {
        if ((amplitudes[i] >= 300 || (!showArea)) && (amplitudes[i] < 410 || showArea)) {
          digitalWrite(over[i], off);
        } else {
          digitalWrite(over[i], on);
        }
      }
      digitalWrite(down[7], HIGH);
    } else if (i == 32) {
      digitalWrite(down[7], LOW);
      for (int i = 0; i < 8; i++) {
        if (amplitudes[i] >= 1180) {
          digitalWrite(over[i], off);
        } else {
          digitalWrite(over[i], on);
        }
      }
      digitalWrite(down[0], HIGH);
    }
  }
  endTime = millis();

  //Serial.println(endTime - startTime);
}


//-----------------------------FFT Function----------------------------------------------//

void FFT(int in[], int N, float Frequency) {

  unsigned int data[13] = { 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048 };
  int a, c1, f, o, x;
  a = N;

  for (int i = 0; i < 12; i++)  //calculating the levels
  {
    if (data[i] <= a) { o = i; }
  }

  int in_ps[a] = {};     //input for sequencing
  float out_r[a] = {};   //real part of transform
  float out_im[a] = {};  //imaginory part of transform

  x = 0;
  for (int b = 0; b < o; b++)  // bit reversal
  {
    c1 = data[b];
    f = data[o] / (c1 + c1);
    for (int j = 0; j < c1; j++) {
      x = x + 1;
      in_ps[x] = in_ps[j] + f;
    }
  }


  for (int i = 0; i < data[o]; i++)  // update input array as per bit reverse order
  {
    if (in_ps[i] < a) { out_r[i] = in[in_ps[i]]; }
    if (in_ps[i] > a) { out_r[i] = in[in_ps[i] - a]; }
  }


  int i10, i11, n1;
  float e, c, s, tr, ti;

  for (int i = 0; i < o; i++)  //fft
  {
    i10 = data[i];                // overall values of sine/cosine  :
    i11 = data[o] / data[i + 1];  // loop with similar sine cosine:
    e = 360 / data[i + 1];
    e = 0 - e;
    n1 = 0;

    for (int j = 0; j < i10; j++) {
      c = cosine(e * j);
      s = sine(e * j);
      n1 = j;

      for (int k = 0; k < i11; k++) {
        tr = c * out_r[i10 + n1] - s * out_im[i10 + n1];
        ti = s * out_r[i10 + n1] + c * out_im[i10 + n1];

        out_r[n1 + i10] = out_r[n1] - tr;
        out_r[n1] = out_r[n1] + tr;

        out_im[n1 + i10] = out_im[n1] - ti;
        out_im[n1] = out_im[n1] + ti;

        n1 = n1 + i10 + i10;
      }
    }
  }


  //---> here onward out_r contains amplitude and our_in conntains frequency (Hz)
  for (int i = 0; i < data[o - 1]; i++)  // getting amplitude from complex number
  {
    out_r[i] = sqrt(out_r[i] * out_r[i] + out_im[i] * out_im[i]);
    //exportnums[i] = out_r[i];
    out_im[i] = i * Frequency / N;

    if (i == 1) amplitudes[0] += (int)out_r[i];
    if (i > 1 && i <= 2) amplitudes[1] += (int)out_r[i];
    if (i > 2 && i <= 3) amplitudes[2] += (int)out_r[i];
    if (i > 3 && i <= 5) amplitudes[3] += (int)out_r[i];
    if (i > 5 && i <= 7) amplitudes[4] += (int)out_r[i];
    if (i > 7 && i <= 12) amplitudes[5] += (int)out_r[i];
    if (i > 12 && i <= 19) amplitudes[6] += (int)out_r[i];
    if (i > 19) amplitudes[7] += (int)out_r[i];
  }
}


float sine(int i) {
  int j = i;
  float out;
  while (j < 0) { j = j + 360; }
  while (j > 360) { j = j - 360; }
  if (j > -1 && j < 91) {
    out = sine_data[j];
  } else if (j > 90 && j < 181) {
    out = sine_data[180 - j];
  } else if (j > 180 && j < 271) {
    out = -sine_data[j - 180];
  } else if (j > 270 && j < 361) {
    out = -sine_data[360 - j];
  }
  return (out / 255);
}

float cosine(int i) {
  int j = i;
  float out;
  while (j < 0) { j = j + 360; }
  while (j > 360) { j = j - 360; }
  if (j > -1 && j < 91) {
    out = sine_data[90 - j];
  } else if (j > 90 && j < 181) {
    out = -sine_data[j - 90];
  } else if (j > 180 && j < 271) {
    out = -sine_data[270 - j];
  } else if (j > 270 && j < 361) {
    out = sine_data[j - 270];
  }
  return (out / 255);
}

//------------------------------------------------------------------------------------//
